/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/css/style.css":
/*!***************************!*\
  !*** ./src/css/style.css ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/js/filter.js":
/*!**************************!*\
  !*** ./src/js/filter.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterForUrgency: () => (/* binding */ filterForUrgency)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./src/js/index.js");


const visitUrgency = document.querySelector('#urgency');

let filteredVisits = '';

// filter for urgency
function filterForUrgency(visits) {
    visitUrgency.addEventListener('change', function (e) {
        const value = e.target.value;

        if (value != 'all') {
            filteredVisits = visits.filter((visit) => visit.details.urgency == value);
        } else {
            filteredVisits = visits;
        }
        (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.displayCards)(filteredVisits)

    });
}







/***/ }),

/***/ "./src/js/generalDoctorsInfo.js":
/*!**************************************!*\
  !*** ./src/js/generalDoctorsInfo.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisitCardiologist: () => (/* binding */ VisitCardiologist),
/* harmony export */   VisitDentist: () => (/* binding */ VisitDentist),
/* harmony export */   VisitDoctors: () => (/* binding */ VisitDoctors),
/* harmony export */   VisitTherapist: () => (/* binding */ VisitTherapist)
/* harmony export */ });
class VisitDoctors {
    constructor(
        visitPurpose,
        briefDescription,
        urgencyLevel,
        fullName,
        modalBody
    ) {
        this.visitPurpose = visitPurpose;
        this.briefDescription = briefDescription;
        this.urgencyLevel = urgencyLevel;
        this.fullName = fullName;
        this.modalBody = modalBody;
    }

    handleInput(input, property) {
        input.addEventListener("input", (e) => {
            this[property] = e.target.value;
            console.log(this[property]);
        });
    }

    renderGeneralInfo() {
        const div = document.createElement("div");
        div.innerHTML = `
        <input class="modal-input visit-input" type="text" placeholder="Visit purpose" value="${this.visitPurpose
            }" name="title"><br>
        <input class="modal-input visit-input" type="text" placeholder="Brief visit description" value="${this.briefDescription
            }" name="description"><br>
        <select class="modal-input visit-input" name="urgency">
        <option>Urgency Level</option>
          <option value="normal" ${this.urgencyLevel === "normal" ? "selected" : ""
            }>Normal</option>
          <option value="priority" ${this.urgencyLevel === "priority" ? "selected" : ""
            }>Priority</option>
          <option value="urgent" ${this.urgencyLevel === "urgent" ? "selected" : ""
            }>Urgent</option>
        </select><br>
       <input class="modal-input visit-input" type="text" placeholder="Full name" value="${this.fullName
            }" name="fullName"><br>
      `;

        const inputPurpose = div.querySelector(
            'input[placeholder="Visit purpose"]'
        );
        const inputDescription = div.querySelector(
            'input[placeholder="Brief visit description"]'
        );
        const selectUrgency = div.querySelector("select");
        const inputFullName = div.querySelector('input[placeholder="Full name"]');
        const doctorsInfo = this.modalBody.querySelector('.doctors-info')
        this.handleInput(inputPurpose, "visitPurpose");
        this.handleInput(inputDescription, "briefDescription");
        this.handleInput(selectUrgency, "urgencyLevel");
        this.handleInput(inputFullName, "fullName");
        doctorsInfo.appendChild(div)
        this.modalBody.appendChild(doctorsInfo);

        return this.modalBody;
    }
}

class VisitCardiologist extends VisitDoctors {
    constructor(
        bloodPressure,
        bmi,
        prevDiseases,
        age,
        visitPurpose,
        briefDescription,
        urgencyLevel,
        fullName,
        modalBody
    ) {
        super(visitPurpose, briefDescription, urgencyLevel, fullName, modalBody);
        this.bloodPressure = bloodPressure;
        this.bmi = bmi;
        this.prevDiseases = prevDiseases;
        this.age = age;
    }
    renderCardiologistInfo() {
        const div = document.createElement("div");
        div.innerHTML = `
          <input class="modal-input visit-input" type="text" placeholder="Normal blood pressure" value="${this.bloodPressure}" name="bp"><br>
          <input class="modal-input visit-input" type="number" placeholder="Body Mass Index (BMI)" value="${this.bmi}" name="bmi"><br>
          <input class="modal-input visit-input" type="text" placeholder="Previously diagnosed cardiovascular diseases" value="${this.prevDiseases}" name="disease"><br>
         <input class="modal-input visit-input" type="number" placeholder="Age" value="${this.age}" name="age"><br>
        `;

        const inputbloodPress = div.querySelector(
            'input[placeholder="Normal blood pressure"]'
        );
        const inputBmi = div.querySelector(
            'input[placeholder="Body Mass Index (BMI)"]'
        );
        const inputDiseases = div.querySelector(
            'input[placeholder="Previously diagnosed cardiovascular diseases"]'
        );
        const inputAge = div.querySelector('input[placeholder="Age"]');
        const doctorsInfo = this.modalBody.querySelector('.doctors-info')
        //Console.log("");console.log(inputbloodPress);
        this.handleInput(inputbloodPress, "bloodPressure");
        this.handleInput(inputBmi, "bmi");
        this.handleInput(inputDiseases, "prevDiseases");
        this.handleInput(inputAge, "age");
        doctorsInfo.appendChild(div)
        this.modalBody.appendChild(doctorsInfo);

        return this.modalBody;
    }
}

class VisitDentist extends VisitDoctors{
    constructor( 
        visitDate,
        visitPurpose,
        briefDescription,
        urgencyLevel,
        fullName,
        modalBody){
        super(visitPurpose, briefDescription, urgencyLevel, fullName, modalBody)
        this.visitDate=visitDate
    }
    renderDentistInfo(){
         const div=document.createElement('div');
         div.innerHTML=`
         <input class="modal-input visit-input" type="date" value="${this.visitDate}" placeholder="Last visit date" name="visitDate"/>
         `;
         const inputVisitDate=div.querySelector('input[placeholder="Last visit date"]');
         this.handleInput(inputVisitDate,"visitDate");
         const doctorsInfo = this.modalBody.querySelector('.doctors-info');
         doctorsInfo.appendChild(div)
         this.modalBody.appendChild(doctorsInfo);
         return this.modalBody
    }
} 

class VisitTherapist extends VisitDoctors{
    constructor( 
        age,
        visitPurpose,
        briefDescription,
        urgencyLevel,
        fullName,
        modalBody){
        super(visitPurpose, briefDescription, urgencyLevel, fullName, modalBody)
        this.age=age
    }
    renderTherapistInfo(){
         const div=document.createElement('div');
         div.innerHTML=`
         <input class="modal-input visit-input" type="number" value="${this.age}" placeholder="Age" name="age"/>
         `;
         const inputAge=div.querySelector('input[placeholder="Age"]');

         this.handleInput(inputAge,"age");
         const doctorsInfo = this.modalBody.querySelector('.doctors-info');
         doctorsInfo.appendChild(div)
         this.modalBody.appendChild(doctorsInfo);
         return this.modalBody
    }
} 

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteVisit: () => (/* binding */ deleteVisit),
/* harmony export */   displayCards: () => (/* binding */ displayCards),
/* harmony export */   sendEditedDataToServer: () => (/* binding */ sendEditedDataToServer)
/* harmony export */ });
/* harmony import */ var _modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal.js */ "./src/js/modal.js");
/* harmony import */ var _visit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visit.js */ "./src/js/visit.js");
/* harmony import */ var _css_style_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../css/style.css */ "./src/css/style.css");
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter.js */ "./src/js/filter.js");
/* harmony import */ var _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./generalDoctorsInfo.js */ "./src/js/generalDoctorsInfo.js");
// your@email.com password ---> with data
// fisojej763@iturchia.com 123server ---> without data









const loginBtn = document.querySelector('.btn-login');
let loginModal = null;
let cachedData = null;
document.addEventListener('DOMContentLoaded', handleLogin);


loginBtn.addEventListener('click', function () {
    if (!loginModal) {
        const content = `
        <input type="email" id="email" placeholder="Email" class="modal-input">
        <input type="password" id="password" placeholder="Password" class="modal-input">
        <span class="error-message"></span>
        <button class="modal-submit-btn">Login</button>`

        loginModal = new _modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]('Login Modal');
        loginModal.render(content);
        checkFields(loginModal);
    } else {
        loginModal.show();
    }

})


async function login(userData, loginModal) {
    try {
        const response = await fetch("https://ajax.test-danit.com/api/v2/cards/login", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email: userData.userEmail, password: userData.userPassword })
        });

        if (response.ok) {
            const token = await response.text();
            localStorage.setItem('token', token)
            localStorage.setItem('loggedIn', 'true')
            handleLogin();

            loginModal.close();

        } else {
            loginModal.showError('Incorrect username or password')
        }
    } catch (error) {
        console.error('Error:', error);
    }
}


function checkFields(loginModal) {
    const modalSubmitBtn = document.querySelector('.modal-submit-btn');


    modalSubmitBtn.addEventListener('click', function () {
        const userEmail = document.querySelector('#email').value;
        const userPassword = document.querySelector('#password').value;
        const userData = { userEmail, userPassword };

        if (userEmail == '' || userPassword == '') {
            loginModal.showError('Please fill all the fields');
            return
        }

        else {
            loginModal.hideError()
            login(userData, loginModal)
        }
    })
}

function visitsCard(data) {
    return data.map((visit) => {
        const { fullName, doctor, id, ...details } = visit;
        const newVisit = new _visit_js__WEBPACK_IMPORTED_MODULE_1__["default"](fullName, doctor, id, details);
        return newVisit
    })
}
async function displayCards(filteredVisits) {
    const filterForm = document.querySelector('.form__wrapper');
    filterForm.style.display = 'block';
    try {
        const data = await fetchCards();
        const visitsWrapper = document.querySelector('.visits__cards');
        console.log(visitsWrapper)
        const noItemMsg = document.querySelector('.no-items-message');
        console.log(noItemMsg)
        if (!data || data.length === 0) {
            noItemMsg.style.display = 'block'
        }
        else {
            noItemMsg.style.display = 'none'
            let visits = visitsCard(data)
            console.log(visits)
            ;(0,_filter_js__WEBPACK_IMPORTED_MODULE_3__.filterForUrgency)(visits)

            visits.forEach((newVisit) => {
                visitsWrapper.appendChild(newVisit.render());
            });
            if (filteredVisits) {
                visits = filteredVisits;
            }
            visitsWrapper.innerHTML = '';
            if (visits.length === 0) {
                noItemMsg.textContent = 'No Items found'
                noItemMsg.style.display = 'block'

            } else {
                visits.forEach((newVisit) => {
                    visitsWrapper.appendChild(newVisit.render());
                });
            }
            return visits;
        }


    } catch (error) {
        console.error(error);
    }


}



function handleLogin() {
    const isLoggedIn = localStorage.getItem('loggedIn');
    const noItemMsg = document.querySelector('.no-items-message');
    noItemMsg.style.display = 'block'
    if (isLoggedIn === 'true') {
        noItemMsg.style.display = 'none'
        const loginBtn = document.querySelector('.btn-login');
        const createVisitBtn = document.querySelector('.btn-create-visit');

        loginBtn.style.display = 'none';
        createVisitBtn.style.display = 'block';

        displayCards();


    } else {
        const loginBtn = document.querySelector('.btn-login');
        loginBtn.style.display = 'block';
    }

}


async function fetchCards() {
    try {
        if (cachedData) {
            return cachedData;
        }
        const response = await fetch("https://ajax.test-danit.com/api/v2/cards", {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${localStorage.getItem('token')}`,
            }
        })
        const data = await response.json();
        cachedData = data;
        return cachedData

    } catch (error) {
        console.error(error)
    }
}


// Create Visit section

const createVisitBtn = document.querySelector('.btn-create-visit');
console.log(createVisitBtn)
createVisitBtn.addEventListener('click', createVisit)

function createVisit() {
    const content = `
    <select id="create-visit" class="modal-input" name="Select a doctor">
        <option >Select a doctor</option>
        <option value="Cardiologist">Cardiologist</option>
        <option value="Dentist">Dentist</option>
        <option value="Therapist">Therapist</option>
    </select>
    <div class='doctors-info'></div>
    <button class='create-button btn btn-create-visit'>Create</button>
    `;

    const createVisitModal = new _modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]('Create Visit');
    createVisitModal.render(content);
    const modalBody = createVisitModal.modal.querySelector('.modal-body');
    const createButton = modalBody.querySelector('.create-button');
    createButton.disabled = true
    // Event delegation to handle the change event on the select element
    modalBody.addEventListener('change', (event) => {
        const select = event.target;
        if (select.id === 'create-visit') {
            // Clear the existing content in the modal body
            const div = modalBody.querySelector('.doctors-info');

            if (div) {
                div.innerHTML = '';
            }

            const selectedOption = select.options[select.selectedIndex].value;
            if (selectedOption !== 'Select a doctor') {
                createButton.disabled = false;
                const doctors = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_4__.VisitDoctors('', '', '', '', modalBody);
                doctors.renderGeneralInfo();
                if (selectedOption === 'Cardiologist') {
                    const cardiologist = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_4__.VisitCardiologist('', '', '', '', '', '', '', '', modalBody);
                    cardiologist.renderCardiologistInfo();
                }
                if (selectedOption === 'Dentist') {
                    const dentist = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_4__.VisitDentist('', '', '', '', '', modalBody);
                    dentist.renderDentistInfo();
                }
                if (selectedOption === 'Therapist') {
                    const therapist = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_4__.VisitTherapist('', '', '', '', '', modalBody);
                    therapist.renderTherapistInfo();
                }
            }

            else {
                createButton.disabled = true;
            }
        }
    })

    createButton.addEventListener('click', () => {
        const modalInputs = [...modalBody.querySelectorAll('.visit-input')]
        const selectedOption = modalBody.querySelector('.modal-input')
        const modalInputData = {};

        modalInputs.forEach(input => {
            const key = input.name;
            const value = input.value;
            modalInputData[key] = value;
        });
        sendCards(modalInputData, selectedOption.value, createVisitModal)
    })

}

const sendCards = async (obj, selectedOption, createVisitModal) => {
    try {
        const { fullName, ...details } = obj;
        const response = await fetch("https://ajax.test-danit.com/api/v2/cards", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                fullName: fullName,
                title: details.title,
                description: details.description,
                doctor: selectedOption,
                bp: details.bp,
                urgency: details.urgency,
                disease: details.disease,
                visitDate: details.visitDate,
                age: details.age,
                weight: details.bmi,
            })
        });

        if (response.ok) {
            cachedData = null;
            const noItemMsg = document.querySelector('.no-items-message');
            if (noItemMsg) {
                noItemMsg.style.display = 'none'
            }
            // Close the modal when the response is successful    
            const data = await response.json();
            const newVisit = new _visit_js__WEBPACK_IMPORTED_MODULE_1__["default"](fullName, selectedOption, data.id, details)
            newVisit.render();
            const visits = document.querySelector('.visits__cards');
            visits.appendChild(newVisit.visitItem)
            createVisitModal.close()
            return visits

        }

    }
    catch (err) {
        console.log('Error:', err)
    }
}

//Delete visit
async function deleteVisit(id) {
    const response = await fetch(`https://ajax.test-danit.com/api/v2/cards/${id}`, {
        method: 'DELETE',
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
        },

    });
    if (response.ok) {
        cachedData = null;
        const visits = document.querySelector('.visits')
        const noItemMsg = visits.querySelector('.no-items-message')
        const visitsCards = visits.querySelector('.visits__cards')
        const item = [...visitsCards.querySelectorAll('.item')];
        console.log(item)
        noItemMsg.style.display = item.length === 0 ? 'block' : 'none'
    }
    return response
}

//Search for title/description
const searchInput = document.querySelector('input[type="search"]');
const searchBtn = document.querySelector('.btn-search');
//TODO Fix when trying to delete founded element it should be deleted from ui
searchInput.addEventListener('input', async (e) => {
    searchCards()
})

const searchCards = async () => {
    const searchedItem = searchInput.value.toLowerCase()
    const data = await fetchCards();
    const visits = visitsCard(data);
    const filteredVisits = visits.filter((visit) =>
        visit.details.title.toLowerCase().includes(searchedItem) || visit.details.description.toLowerCase().includes(searchedItem))
    displayCards(filteredVisits);

}
searchBtn.addEventListener('click', (e) => {
    e.preventDefault();
    searchCards()
})

// Send edited Cards to the Server
async function sendEditedDataToServer(editedData, editedId) {
    try {
        const response = await fetch(`https://ajax.test-danit.com/api/v2/cards/${editedId}`, {
            method: 'PUT', // Use 'PUT' method to update the existing data on the server
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`,
            },
            body: JSON.stringify(editedData),
        });

        if (response.ok) {
            cachedData = null;
            return response
        }

        // Optionally, you can handle the response from the server here, if needed.
    } catch (error) {
        console.error('Error updating data on the server:', error);
        // Handle error scenarios, e.g., show an error message to the user.
    }
}



/***/ }),

/***/ "./src/js/modal.js":
/*!*************************!*\
  !*** ./src/js/modal.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class Modal {
    constructor(modalTitle) {
        this.modalTitle = modalTitle;
        this.errorShown = false;
        
    }
    close() {
        this.modal.style.display = 'none'
    }

    show() {
        this.modal.style.display = 'flex'

    }
    showError(message) {
        const errorMsg = this.modal.querySelector('.error-message');
        errorMsg.textContent = message;
        errorMsg.style.display = 'flex';
        this.errorShown = true;


    }
    hideError() {
        const errorMsg = this.modal.querySelector('.error-message');
        errorMsg.style.display = 'none';
        this.errorShown = false;

    }

    render(content) {

        this.modal = document.createElement('div');
        this.modal.classList.add('modal');
        this.modal.innerHTML = `
            <div class="modal-wrapper">
                <span class="close-modal-btn">&times;</span>
            <div class='modal-header'>
                <h2>${this.modalTitle}</h2>
            </div>
            <div class='modal-body'>
            ${content}
            
            </div>
            </div>
   
        `

        document.body.append(this.modal)

        this.errorMsg = this.modal.querySelector('.error-message');


        const closeModalBtn = this.modal.querySelector('.close-modal-btn');
        const modalWrapper = this.modal;

        closeModalBtn.addEventListener('click', () => {
            this.close();
        });

        modalWrapper.addEventListener('click', (event) => {
            if (event.target === modalWrapper) {
                this.close();
            }
        });

        return this.modal;
    }
}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Modal);

/***/ }),

/***/ "./src/js/visit.js":
/*!*************************!*\
  !*** ./src/js/visit.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Visit)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./src/js/index.js");
/* harmony import */ var _modal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal.js */ "./src/js/modal.js");
/* harmony import */ var _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generalDoctorsInfo.js */ "./src/js/generalDoctorsInfo.js");



class Visit {
  constructor(fullName, doctorsName, id, details) {
    this.fullName = fullName;
    this.doctorsName = doctorsName;
    this.id = id;
    this.details = details;
    this.detailsShown = false;
  }
  onDelete() {
    (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.deleteVisit)(this.id);
    this.visitItem.remove();
  }

  render() {
    this.visitItem = document.createElement("div");
    this.visitItem.classList.add("item");
    this.visitItem.innerHTML = `
            <span class="close-item-btn">&times;</span>
            <h5 class="user-info item-description">Patient's Name: ${this.fullName}</h5>
            <h5 class="doctor-info item-description">Doctor's Name: ${this.doctorsName}</h5>
            <div class="details-info"></div>
            <button class="edit-btn item-button">Edit</button>
            <button class="show-more-btn item-button">Show More</button>
        `;
    const showMoreButton = this.visitItem.querySelector(".show-more-btn");
    const detailsInfo = this.details;
    const detailsContainer = this.visitItem.querySelector(".details-info");
    const editButton = this.visitItem.querySelector(".edit-btn");
    editButton.addEventListener("click", () => {
      this.editCards();

      // this.visitItem.innerHTML = editedContent;
    });

    for (const key in detailsInfo) {
      if (Object.hasOwnProperty.call(detailsInfo, key)) {
        const value = detailsInfo[key];
        const detailsElement = document.createElement("p");
        detailsElement.classList.add("item-description");
        detailsElement.textContent = `${key}: ${value}`;
        detailsContainer.appendChild(detailsElement);
      }
    }
    detailsContainer.style.display = "none";

    showMoreButton.addEventListener("click", () => {
      if (!this.detailsShown) {
        // while (detailsContainer.firstChild) {
        //     detailsContainer.removeChild(detailsContainer.firstChild);
        // }
        detailsContainer.style.display = "block";

        showMoreButton.textContent = "Show Less";

        this.detailsShown = true;
      } else {
        detailsContainer.style.display = "none";

        showMoreButton.textContent = "Show More";
        this.detailsShown = false;
      }
    });

    const closeButton = this.visitItem.querySelector(".close-item-btn");
    closeButton.addEventListener("click", () => {
      this.onDelete(this.id);
    });
    if (!this.visitItem) {
      const noItemMsg = document.querySelector(".no-items-message");
      noItemMsg.style.display = "block";
    }
    return this.visitItem;
  }
  editCards() {
    const visitModal = new _modal_js__WEBPACK_IMPORTED_MODULE_1__["default"]("Edit Visit");
    const content = `
      <select id="create-visit" class="modal-input" name="Select a doctor">
        <option>Select a doctor</option>
        <option value="Cardiologist" ${
          this.doctorsName === "Cardiologist" ? "selected" : ""
        }>Cardiologist</option>
        <option value="Dentist" ${
          this.doctorsName === "Dentist" ? "selected" : ""
        }>Dentist</option>
        <option value="Therapist" ${
          this.doctorsName === "Therapist" ? "selected" : ""
        }>Therapist</option>
      </select>
      <div class='doctors-info'></div>
      <button class='create-button btn btn-edit-visit'>Edit</button>
    `;
    visitModal.render(content);
    const modalBody = visitModal.modal.querySelector(".modal-body");
    const selected = modalBody.querySelector("select");
  
    const updateDoctorInfo = () => {
      const div = modalBody.querySelector(".doctors-info");
      if (div) {
        div.innerHTML = "";
      }
      const selectedValue = selected.value;
      if (selectedValue !== "Select a doctor") {
        const commonData = {
          title: this.details.title || "",
          description: this.details.description || "",
          urgency: this.details.urgency || "",
          fullName: this.fullName || "",
          modalBody,
        };
        
        const doctors = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_2__.VisitDoctors(
          commonData.title,
          commonData.description,
          commonData.urgency,
          commonData.fullName,
          commonData.modalBody
        );
        doctors.renderGeneralInfo();
  
        if (selectedValue === "Cardiologist") {
          const cardiologist = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_2__.VisitCardiologist(
            this.details.bp || "",
            this.details.weight || "",
            this.details.disease || "",
            this.details.age || "",
            commonData.title,
            commonData.description,
            commonData.urgency,
            commonData.fullName,
            commonData.modalBody
          );
          cardiologist.renderCardiologistInfo();
        } else if (selectedValue === "Dentist") {
          const dentist = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_2__.VisitDentist(
            this.details.visitDate || "",
            commonData.title,
            commonData.description,
            commonData.urgency,
            commonData.fullName,
            commonData.modalBody
          );
          dentist.renderDentistInfo();
        } else if (selectedValue === "Therapist") {
          const therapist = new _generalDoctorsInfo_js__WEBPACK_IMPORTED_MODULE_2__.VisitTherapist(
            this.details.age || "",
            commonData.title,
            commonData.description,
            commonData.urgency,
            commonData.fullName,
            commonData.modalBody
          );
          therapist.renderTherapistInfo();
        }
      }
    };
  
    selected.addEventListener("change", updateDoctorInfo);
  
    const edit = modalBody.querySelector(".btn-edit-visit");
    edit.addEventListener("click", (e) => {
      visitModal.close();
      const modalInputs = [...modalBody.querySelectorAll(".visit-input")];
      const selectedOption = modalBody.querySelector(".modal-input");
      const modalInputData = {};
  
      modalInputs.forEach((input) => {
        const key = input.name;
        const value = input.value;
        modalInputData[key] = value;
      });
      this.details = modalInputData;
      modalInputData.doctor = selectedOption.value;
      this.doctorsName = modalInputData.doctor;
      const userInfo = this.visitItem.querySelector(".user-info");
      const doctorInfo = this.visitItem.querySelector(".doctor-info");
      userInfo.textContent = `Patient's Name: ${modalInputData.fullName}`;
      doctorInfo.textContent = `Doctor's Name: ${selectedOption.value}`;
      selected.value = this.doctorsName;
  
      (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.sendEditedDataToServer)(modalInputData, this.id)
        .then((response) => {
          // Assuming the server response contains the updated data
          console.log("Data updated:", response);
          const detailsContainer = this.visitItem.querySelector(".details-info");
          const showMoreButton = this.visitItem.querySelector(".show-more-btn");
  
          // Clear the existing details container
          detailsContainer.innerHTML = "";
  
          for (const key in modalInputData) {
            if (Object.hasOwnProperty.call(modalInputData, key) && key !== "doctor") {
              const value = modalInputData[key];
              const detailsElement = document.createElement("p");
              detailsElement.classList.add("item-description");
              detailsElement.textContent = `${key}: ${value}`;
              detailsContainer.appendChild(detailsElement);
            }
          }
  
          // Toggle the detailsShown flag and update the show more/less button accordingly
          if (!this.detailsShown) {
            this.detailsShown = true;
            showMoreButton.textContent = "Show Less";
            detailsContainer.style.display = "block"; // Display the details container
          } else {
            this.detailsShown = false;
            showMoreButton.textContent = "Show More";
            detailsContainer.style.display = "none"; // Hide the details container
          }
        })
        .catch((error) => {
          console.error("Error updating data:", error);
        });
    });
  
    // Initialize the modal with the correct doctor's info if already selected
    updateDoctorInfo();
  }
  
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./src/js/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/css/style.css");
/******/ 	
/******/ })()
;